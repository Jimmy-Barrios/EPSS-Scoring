<?php
/**
 * Plugin Name: EPSS Vulnerability Analyzer
 * Description: Allows users to enter a CVE number and view the EPSS score and attack vector visualization
 * Version: 2.0.0
 * Author: Jimmy Barrios
 * License: GPL-2.0+
 */

// Exit if accessed directly
if (!defined('ABSPATH')) {
    exit;
}

// Define plugin constants
define('EPSS_ANALYZER_VERSION', '1.0.0');
define('EPSS_ANALYZER_PLUGIN_DIR', plugin_dir_path(__FILE__));
define('EPSS_ANALYZER_PLUGIN_URL', plugin_dir_url(__FILE__));

// Include required files
require_once EPSS_ANALYZER_PLUGIN_DIR . 'includes/class-epss-api.php';
require_once EPSS_ANALYZER_PLUGIN_DIR . 'includes/class-epss-visualization.php';

/**
 * Main plugin class
 */
class EPSS_Vulnerability_Analyzer {
    
    /**
     * Constructor
     */
    public function __construct() {
        // Register activation and deactivation hooks
        register_activation_hook(__FILE__, array($this, 'activate'));
        register_deactivation_hook(__FILE__, array($this, 'deactivate'));
        
        // Initialize the plugin
        add_action('init', array($this, 'init'));
        
        // Register shortcode
        add_shortcode('epss_analyzer', array($this, 'shortcode_callback'));
        
        // Enqueue scripts and styles
        add_action('wp_enqueue_scripts', array($this, 'enqueue_scripts'));

        // Add meta tag to ensure compatibility with dark themes
        add_action('wp_head', array($this, 'add_compatibility_meta'));
        
        // Add custom styles to ensure theme compatibility
        add_action('wp_head', array($this, 'add_custom_styles'));
    }
    
    /**
     * Plugin activation
     */
    public function activate() {
        // Activation tasks
        flush_rewrite_rules();
    }
    
    /**
     * Plugin deactivation
     */
    public function deactivate() {
        // Deactivation tasks
        flush_rewrite_rules();
    }
    
    /**
     * Initialize plugin
     */
    public function init() {
        // Plugin initialization
    }
    
    /**
     * Add meta tag for theme compatibility
     */
    public function add_compatibility_meta() {
        echo '<meta name="epss-analyzer-theme" content="dark">';
    }
    
    /**
     * Add custom styles for theme compatibility
     */
    public function add_custom_styles() {
        ?>
        <style type="text/css">
            /* Override for text inputs */
            .epss-analyzer-container input[type="text"] {
                background-color: #2d2d2d !important;
                color: #fff !important;
                border: 1px solid #444 !important;
                box-shadow: none !important;
            }
            
            /* Override for buttons */
            .epss-analyzer-container button,
            .epss-analyzer-container .epss-form-submit button {
                background-color: #7ede3b !important;
                color: #000 !important;
                border: none !important;
                box-shadow: none !important;
                font-weight: bold;
            }
            
            /* Override for form background */
            .epss-analyzer-container .epss-analyzer-form {
                background-color: #1e1e1e !important;
                color: #e0e0e0 !important;
                border: 1px solid #333 !important;
            }
            
            /* Override for results containers */
            .epss-score-box {
                background-color: rgba(0, 160, 234, 0.1) !important;
                border: 1px solid rgba(0, 160, 234, 0.3) !important;
            }
            
            .epss-percentile-box {
                background-color: rgba(253, 198, 0, 0.1) !important;
                border: 1px solid rgba(253, 198, 0, 0.3) !important;
            }
            
            /* References toggle button */
            .epss-references-toggle {
                list-style-type: none !important;
                margin-top: 8px !important;
            }
            
            .epss-references-toggle-btn {
                background-color: transparent !important;
                color: #7ede3b !important;
                border: 1px solid #444 !important;
                border-radius: 4px !important;
                padding: 4px 10px !important;
                font-size: 0.85em !important;
                cursor: pointer !important;
                transition: all 0.2s ease !important;
            }
            
            .epss-references-toggle-btn:hover {
                background-color: rgba(126, 222, 59, 0.1) !important;
                border-color: #7ede3b !important;
            }
            
            .epss-references-collapsed {
                margin-top: 5px !important;
                padding-top: 5px !important;
                border-top: 1px dashed #444 !important;
            }
        </style>
        <?php
    }
    
    /**
     * Enqueue scripts and styles
     */
    public function enqueue_scripts() {
        // Dashicons for UI elements
        wp_enqueue_style('dashicons');
        
        // Chart.js for visualizations
        wp_enqueue_script('chartjs', 'https://cdn.jsdelivr.net/npm/chart.js', array(), '3.7.1', true);
        
        // Plugin CSS
        wp_enqueue_style('epss-analyzer-css', EPSS_ANALYZER_PLUGIN_URL . 'assets/css/epss-analyzer.css', array(), EPSS_ANALYZER_VERSION);
        
        // Plugin JS
        wp_enqueue_script('epss-analyzer-js', EPSS_ANALYZER_PLUGIN_URL . 'assets/js/epss-analyzer.js', array('jquery', 'chartjs'), EPSS_ANALYZER_VERSION, true);
        
        // Dedicated radar chart script
        wp_enqueue_script('epss-radar-chart-js', EPSS_ANALYZER_PLUGIN_URL . 'assets/js/radar-chart.js', array('jquery', 'chartjs'), EPSS_ANALYZER_VERSION, true);
        
        // Debug script (only in development or when debug flag is set)
        if (defined('WP_DEBUG') && WP_DEBUG || isset($_GET['epss_debug'])) {
            wp_enqueue_script('epss-debug-js', EPSS_ANALYZER_PLUGIN_URL . 'assets/js/debug.js', array('jquery'), EPSS_ANALYZER_VERSION, true);
        }
        
        // Localize script with ajax url
        wp_localize_script('epss-analyzer-js', 'epss_analyzer_vars', array(
            'ajax_url' => admin_url('admin-ajax.php'),
            'nonce' => wp_create_nonce('epss_analyzer_nonce'),
            'theme' => 'dark', // Set theme for JS
            'debug' => (defined('WP_DEBUG') && WP_DEBUG) ? 'true' : 'false'
        ));
    }
    
    /**
     * Shortcode callback
     */
    public function shortcode_callback($atts) {
        // Buffer output
        ob_start();
        
        // Include template
        include_once EPSS_ANALYZER_PLUGIN_DIR . 'templates/analyzer-form.php';
        
        // Return buffered content
        return ob_get_clean();
    }
}

// Initialize the plugin
$epss_vulnerability_analyzer = new EPSS_Vulnerability_Analyzer();

// Register AJAX handlers
add_action('wp_ajax_epss_get_data', 'epss_get_data_callback');
add_action('wp_ajax_nopriv_epss_get_data', 'epss_get_data_callback');
add_action('wp_ajax_epss_render_visualization', 'epss_render_visualization_callback');
add_action('wp_ajax_nopriv_epss_render_visualization', 'epss_render_visualization_callback');
add_action('wp_ajax_epss_test_connection', 'epss_test_connection_callback');
add_action('wp_ajax_nopriv_epss_test_connection', 'epss_test_connection_callback');

/**
 * AJAX callback to get EPSS data
 */
function epss_get_data_callback() {
    // Check nonce - make it optional for public use
    if (is_user_logged_in()) {
        check_ajax_referer('epss_analyzer_nonce', 'nonce');
    }
    
    // Get the CVE number
    $cve_id = isset($_POST['cve_id']) ? sanitize_text_field($_POST['cve_id']) : '';
    
    if (empty($cve_id)) {
        wp_send_json_error(array('message' => 'CVE ID is required'));
        return;
    }
    
    // Validate CVE format (basic validation)
    if (!preg_match('/^CVE-\d{4}-\d{4,}$/i', $cve_id)) {
        wp_send_json_error(array('message' => 'Invalid CVE ID format. Use format: CVE-YYYY-NNNNN'));
        return;
    }
    
    // Get EPSS data
    $epss_api = new EPSS_API();
    $result = $epss_api->get_epss_data($cve_id);
    
    if (is_wp_error($result)) {
        wp_send_json_error(array('message' => $result->get_error_message()));
        return;
    }
    
    wp_send_json_success($result);
}

/**
 * AJAX callback to render visualization
 */
function epss_render_visualization_callback() {
    // Check nonce - make it optional for public use
    if (is_user_logged_in()) {
        check_ajax_referer('epss_analyzer_nonce', 'nonce');
    }
    
    // Get the EPSS data
    $epss_data_json = isset($_POST['epss_data']) ? stripslashes($_POST['epss_data']) : '';
    
    if (empty($epss_data_json)) {
        wp_send_json_error(array('message' => 'EPSS data is required'));
        return;
    }
    
    try {
        // Decode the JSON data
        $epss_data = json_decode($epss_data_json, true);
        
        if (is_null($epss_data)) {
            $json_error = json_last_error_msg();
            error_log('EPSS JSON decode error: ' . $json_error);
            wp_send_json_error(array('message' => 'Error decoding EPSS data: ' . $json_error));
            return;
        }
        
        // Debug: Log the EPSS data
        error_log('EPSS Data for visualization: ' . print_r($epss_data, true));
        
        // Ensure required keys exist
        if (!isset($epss_data['cve_id']) && isset($epss_data['cve'])) {
            $epss_data['cve_id'] = $epss_data['cve'];
        }
        
        if (!isset($epss_data['epss']) && isset($epss_data['epss_score'])) {
            $epss_data['epss'] = $epss_data['epss_score'];
        } else if (!isset($epss_data['epss_score']) && isset($epss_data['epss'])) {
            $epss_data['epss_score'] = $epss_data['epss'];
        }
        
        // Create visualization object
        $visualization = new EPSS_Visualization();
        if (!$visualization) {
            wp_send_json_error(array('message' => 'Failed to create visualization object'));
            return;
        }
        
        // Generate the visualization HTML
        $html = $visualization->generate_results_html($epss_data);
        
        // If HTML is empty, report error
        if (empty($html)) {
            wp_send_json_error(array('message' => 'No HTML was generated'));
            return;
        }
        
        // Return the HTML
        wp_send_json_success($html);
        
    } catch (Exception $e) {
        error_log('EPSS Visualization Exception: ' . $e->getMessage());
        wp_send_json_error(array('message' => 'Error processing data: ' . $e->getMessage()));
    }
}

/**
 * AJAX callback to test connection
 */
function epss_test_connection_callback() {
    // Check nonce - make it optional for public use
    if (is_user_logged_in()) {
        check_ajax_referer('epss_analyzer_nonce', 'nonce');
    }
    
    $debug_info = array(
        'status' => 'ok',
        'message' => 'AJAX connection is working correctly',
        'php_version' => phpversion(),
        'wp_version' => get_bloginfo('version'),
        'plugin_version' => EPSS_ANALYZER_VERSION,
        'wp_debug' => defined('WP_DEBUG') && WP_DEBUG ? 'enabled' : 'disabled',
        'memory_limit' => ini_get('memory_limit'),
        'max_execution_time' => ini_get('max_execution_time'),
        'server_software' => isset($_SERVER['SERVER_SOFTWARE']) ? $_SERVER['SERVER_SOFTWARE'] : 'unknown',
        'user_agent' => isset($_SERVER['HTTP_USER_AGENT']) ? $_SERVER['HTTP_USER_AGENT'] : 'unknown'
    );
    
    // Test if we can create an instance of EPSS_API
    try {
        $epss_api = new EPSS_API();
        $debug_info['epss_api_available'] = true;
    } catch (Exception $e) {
        $debug_info['epss_api_available'] = false;
        $debug_info['epss_api_error'] = $e->getMessage();
    }
    
    // Test if we can create an instance of EPSS_Visualization
    try {
        $visualization = new EPSS_Visualization();
        $debug_info['visualization_available'] = true;
    } catch (Exception $e) {
        $debug_info['visualization_available'] = false;
        $debug_info['visualization_error'] = $e->getMessage();
    }
    
    wp_send_json_success($debug_info);
} 