/**
 * EPSS Analyzer JavaScript
 * Enhanced for dark theme compatibility with jimmybarrios.com
 */
(function($) {
    'use strict';
    
    $(document).ready(function() {
        // Check if we're in dark theme mode
        const isDarkTheme = (epss_analyzer_vars.theme === 'dark');
        
        // Apply theme-specific adjustments if needed
        if (isDarkTheme) {
            $('.epss-analyzer-container').addClass('dark-theme');
        }
        
        // Handle form submission
        $('#epss-analyzer-form').on('submit', function(e) {
            e.preventDefault();
            
            // Get CVE ID
            const cveId = $('#cve_id').val().trim();
            
            // Validate CVE ID format
            if (!validateCveId(cveId)) {
                showError('Invalid CVE ID format. Please use the format: CVE-YYYY-NNNNN');
                return;
            }
            
            // Show loading indicator
            showLoading();
            
            // Hide any previous results and errors
            $('#epss-results').hide();
            $('#epss-error').hide();
            
            // Make AJAX request
            $.ajax({
                url: epss_analyzer_vars.ajax_url,
                type: 'POST',
                data: {
                    action: 'epss_get_data',
                    nonce: epss_analyzer_vars.nonce,
                    cve_id: cveId
                },
                success: function(response) {
                    // Hide loading indicator
                    hideLoading();
                    
                    if (response.success) {
                        // Display results
                        displayResults(response.data);
                    } else {
                        // Show error message
                        const errorMsg = response.data.message || 'An error occurred while retrieving EPSS data.';
                        showError(errorMsg);
                        
                        // Log error for debugging
                        console.error('EPSS API Error:', errorMsg);
                    }
                },
                error: function(xhr, status, error) {
                    // Hide loading indicator
                    hideLoading();
                    
                    // Show error message
                    showError('Connection error: ' + error);
                    
                    // Log error for debugging
                    console.error('EPSS AJAX Error:', {xhr, status, error});
                }
            });
        });
        
        /**
         * Validate CVE ID format
         * 
         * @param {string} cveId The CVE ID to validate
         * @return {boolean} Whether the CVE ID is valid
         */
        function validateCveId(cveId) {
            const cvePattern = /^CVE-\d{4}-\d{4,}$/i;
            return cvePattern.test(cveId);
        }
        
        /**
         * Show loading indicator
         */
        function showLoading() {
            $('#epss-loading').fadeIn(200);
            $('#epss-analyze-btn').prop('disabled', true);
        }
        
        /**
         * Hide loading indicator
         */
        function hideLoading() {
            $('#epss-loading').fadeOut(200);
            $('#epss-analyze-btn').prop('disabled', false);
        }
        
        /**
         * Show error message with optional styling based on severity
         * 
         * @param {string} message The error message to display
         */
        function showError(message) {
            const $errorEl = $('#epss-error');
            $errorEl.html(`<span class="dashicons dashicons-warning"></span> ${message}`).fadeIn(300);
            
            // Gently shake the error message to draw attention
            $errorEl.css('position', 'relative');
            animateShake($errorEl);
        }
        
        /**
         * Animate a gentle shake effect
         * 
         * @param {jQuery} $element The element to animate
         */
        function animateShake($element) {
            const keyframes = [
                { transform: 'translateX(0)' },
                { transform: 'translateX(-5px)' },
                { transform: 'translateX(5px)' },
                { transform: 'translateX(-5px)' },
                { transform: 'translateX(5px)' },
                { transform: 'translateX(-5px)' },
                { transform: 'translateX(0)' }
            ];
            
            const options = {
                duration: 500,
                easing: 'ease-in-out'
            };
            
            $element[0].animate(keyframes, options);
        }
        
        /**
         * Display results
         * 
         * @param {Object} data The EPSS data to display
         */
        function displayResults(data) {
            // Log data for debugging
            console.log('EPSS Data:', data);
            
            // Ensure Chart.js is available
            if (typeof Chart === 'undefined') {
                console.error('Chart.js is not loaded!');
                // Try to load Chart.js dynamically
                var script = document.createElement('script');
                script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
                script.onload = function() {
                    console.log('Chart.js loaded dynamically');
                    continueWithChartJs();
                };
                document.head.appendChild(script);
            } else {
                continueWithChartJs();
            }
            
            function continueWithChartJs() {
                // Configure Chart.js for dark theme
                Chart.defaults.color = '#e0e0e0';
                Chart.defaults.borderColor = 'rgba(70, 70, 70, 0.5)';
                Chart.defaults.backgroundColor = 'rgba(30, 30, 30, 0.7)';
                
                // Add global chart plugins for dark mode
                Chart.register({
                    id: 'darkThemePlugin',
                    beforeDraw: (chart) => {
                        const ctx = chart.canvas.getContext('2d');
                        ctx.save();
                        ctx.globalCompositeOperation = 'destination-over';
                        ctx.fillStyle = 'rgba(15, 15, 15, 0.8)';
                        ctx.fillRect(0, 0, chart.width, chart.height);
                        ctx.restore();
                    }
                });
                
                // Call the visualization API to render the results
                $.ajax({
                    url: epss_analyzer_vars.ajax_url,
                    type: 'POST',
                    data: {
                        action: 'epss_render_visualization',
                        nonce: epss_analyzer_vars.nonce,
                        epss_data: JSON.stringify(data)
                    },
                    success: function(response) {
                        if (response.success) {
                            // Update the results container with the visualization HTML
                            const $results = $('#epss-results');
                            $results.html(response.data).hide().fadeIn(400);
                            
                            // Scroll to results smoothly
                            $('html, body').animate({
                                scrollTop: $results.offset().top - 50
                            }, 800);
                            
                            // Check if radar chart was properly initialized
                            setTimeout(function() {
                                const radarCanvas = document.getElementById('epssRadarChart');
                                if (radarCanvas && !radarCanvas._chart) {
                                    console.log('Manually initializing radar chart...');
                                    if (data.model_features || data.attack_vector) {
                                        initializeRadarChart(data);
                                    }
                                }
                            }, 500);
                        } else {
                            // Show error message
                            showError(response.data.message || 'An error occurred while generating visualization.');
                        }
                    },
                    error: function(xhr, status, error) {
                        // Show error message
                        showError('Connection error: ' + error);
                        
                        // Log error for debugging
                        console.error('EPSS Visualization Error:', {xhr, status, error});
                    }
                });
            }
        }
        
        /**
         * Initialize radar chart manually if needed
         */
        function initializeRadarChart(data) {
            // Prepare attack vector data
            let attackVectors = {};
            if (data.model_features) {
                attackVectors = data.model_features;
            } else if (data.attack_vector) {
                // Extract and normalize attack vector data
                const vectors = {
                    'Attack Vector': normalizeValue(data.attack_vector.attack_vector),
                    'Attack Complexity': normalizeValue(data.attack_vector.attack_complexity),
                    'Privileges Required': normalizeValue(data.attack_vector.privileges_required),
                    'User Interaction': normalizeValue(data.attack_vector.user_interaction),
                    'Scope': normalizeValue(data.attack_vector.scope),
                    'Impact': calculateImpact(data.attack_vector)
                };
                attackVectors = vectors;
            } else {
                // Default values
                attackVectors = {
                    'Attack Vector': 0.5,
                    'Attack Complexity': 0.4,
                    'Privileges Required': 0.3,
                    'User Interaction': 0.6,
                    'Scope': 0.5,
                    'Impact': 0.7
                };
            }
            
            // Get canvas and create radar chart
            const canvas = document.getElementById('epssRadarChart');
            if (!canvas) {
                console.error('Radar chart canvas not found');
                return;
            }
            
            const ctx = canvas.getContext('2d');
            const labels = Object.keys(attackVectors);
            const values = Object.values(attackVectors);
            
            // Create chart
            new Chart(ctx, {
                type: 'radar',
                data: {
                    labels: labels,
                    datasets: [{
                        label: 'Attack Vector Impact',
                        data: values,
                        backgroundColor: 'rgba(126, 222, 59, 0.2)',
                        borderColor: 'rgba(126, 222, 59, 0.8)',
                        pointBackgroundColor: 'rgba(126, 222, 59, 1)',
                        pointBorderColor: '#121212',
                        pointHoverBackgroundColor: '#fff',
                        pointHoverBorderColor: 'rgba(126, 222, 59, 1)',
                        borderWidth: 2,
                        pointRadius: 4,
                        pointHoverRadius: 6
                    }]
                },
                options: {
                    responsive: true,
                    maintainAspectRatio: false,
                    scales: {
                        r: {
                            backgroundColor: '#1a1a1a',
                            min: 0,
                            max: 1,
                            ticks: {
                                backdropColor: 'rgba(0, 0, 0, 0)',
                                color: '#aaa',
                                stepSize: 0.2,
                                z: 1
                            },
                            angleLines: {
                                color: 'rgba(70, 70, 70, 0.5)',
                                lineWidth: 1
                            },
                            grid: {
                                color: 'rgba(70, 70, 70, 0.3)',
                                circular: true
                            },
                            pointLabels: {
                                color: '#e0e0e0',
                                font: {
                                    size: 12
                                }
                            }
                        }
                    },
                    plugins: {
                        legend: {
                            labels: {
                                color: '#e0e0e0',
                                font: {
                                    size: 14
                                }
                            }
                        },
                        tooltip: {
                            backgroundColor: 'rgba(15, 15, 15, 0.8)',
                            titleColor: '#7ede3b',
                            bodyColor: '#e0e0e0',
                            borderColor: '#444',
                            borderWidth: 1,
                            callbacks: {
                                label: function(context) {
                                    return 'Impact: ' + (context.raw * 100).toFixed(1) + '%';
                                }
                            }
                        }
                    }
                }
            });
            
            // Update the attack vector bars
            updateAttackVectorBars(attackVectors);
        }
        
        /**
         * Update attack vector bars
         */
        function updateAttackVectorBars(attackVectors) {
            const rows = document.querySelectorAll('.epss-attack-vector-row');
            rows.forEach(row => {
                const vector = row.getAttribute('data-vector');
                if (vector && attackVectors[vector]) {
                    const percentage = Math.round(attackVectors[vector] * 100);
                    const fillBar = row.querySelector('.epss-attack-vector-fill');
                    if (fillBar) {
                        fillBar.style.width = percentage + '%';
                    }
                }
            });
        }
        
        /**
         * Normalize vector values
         */
        function normalizeValue(value) {
            const upperValue = String(value).toUpperCase();
            
            switch (upperValue) {
                case 'NETWORK':
                case 'CHANGED':
                case 'HIGH':
                case 'CRITICAL':
                    return 0.9;
                
                case 'ADJACENT':
                case 'REQUIRED':
                    return 0.7;
                
                case 'LOCAL':
                case 'MEDIUM':
                    return 0.5;
                
                case 'PHYSICAL':
                case 'LOW':
                case 'NONE':
                case 'UNCHANGED':
                    return 0.3;
                    
                default:
                    return 0.5; // Default value
            }
        }
        
        /**
         * Calculate impact score
         */
        function calculateImpact(attackVector) {
            const cImpact = normalizeValue(attackVector.confidentiality_impact || 'MEDIUM');
            const iImpact = normalizeValue(attackVector.integrity_impact || 'MEDIUM');
            const aImpact = normalizeValue(attackVector.availability_impact || 'MEDIUM');
            
            return (cImpact + iImpact + aImpact) / 3;
        }
    });
})(jQuery); 