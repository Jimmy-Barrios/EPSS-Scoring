/**
 * Radar Chart Initialization
 * This file is specifically for rendering the radar chart in the EPSS Vulnerability Analyzer
 */
(function() {
    'use strict';
    
    // Expose initialization function globally
    window.epssInitRadarChart = initRadarChart;
    
    // Wait for a longer time to ensure AJAX content is loaded
    window.addEventListener('load', function() {
        console.log('Window loaded, waiting for AJAX content');
        setTimeout(function() {
            initRadarChart();
        }, 1000); // Wait 1 second after page load
    });
    
    /**
     * Main initialization function
     */
    function initRadarChart() {
        console.log('Radar chart initialization started');
        
        // Try to find the canvas
        var canvas = document.getElementById('epssRadarChart');
        if (!canvas) {
            console.warn('Canvas #epssRadarChart not found during automatic initialization, will be initialized by inline script');
            return;
        }
        
        // Check if chart already initialized
        if (canvas._chart) {
            console.log('Chart already initialized on this canvas');
            return;
        }
        
        continueInitialization(canvas);
    }
    
    /**
     * Continue initialization with the canvas
     */
    function continueInitialization(canvas) {
        // Check if Chart.js is loaded
        if (typeof Chart === 'undefined') {
            console.error('Chart.js not found, attempting to load it');
            
            // Load Chart.js dynamically
            var script = document.createElement('script');
            script.src = 'https://cdn.jsdelivr.net/npm/chart.js';
            script.onload = function() {
                console.log('Chart.js loaded successfully');
                createChart(canvas);
            };
            document.head.appendChild(script);
            return;
        }
        
        createChart(canvas);
    }
    
    /**
     * Create the radar chart
     */
    function createChart(canvas) {
        console.log('Creating radar chart');
        
        // Get the context
        var ctx = canvas.getContext('2d');
        if (!ctx) {
            console.error('Failed to get canvas context');
            return;
        }
        
        // Force dark background
        ctx.fillStyle = '#121212';
        ctx.fillRect(0, 0, canvas.width, canvas.height);
        
        // Get data from canvas data attributes or use defaults
        var labels = getDataFromCanvas(canvas, 'labels') || 
            ['Attack Vector', 'Attack Complexity', 'Privileges Required', 'User Interaction', 'Scope', 'Impact'];
            
        var values = getDataFromCanvas(canvas, 'values') || 
            [0.5, 0.6, 0.3, 0.7, 0.5, 0.8];
        
        // Set Chart.js defaults for dark theme
        Chart.defaults.color = '#e0e0e0';
        Chart.defaults.borderColor = 'rgba(70, 70, 70, 0.5)';
        
        // Create the chart
        var radarChart = new Chart(ctx, {
            type: 'radar',
            data: {
                labels: labels,
                datasets: [{
                    label: 'Attack Vector Impact',
                    data: values,
                    backgroundColor: 'rgba(126, 222, 59, 0.2)',
                    borderColor: 'rgba(126, 222, 59, 0.8)',
                    pointBackgroundColor: 'rgba(126, 222, 59, 1)',
                    pointBorderColor: '#121212',
                    pointHoverBackgroundColor: '#fff',
                    pointHoverBorderColor: 'rgba(126, 222, 59, 1)',
                    borderWidth: 2,
                    pointRadius: 4,
                    pointHoverRadius: 6
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    r: {
                        backgroundColor: '#1a1a1a',
                        min: 0,
                        max: 1,
                        ticks: {
                            backdropColor: 'rgba(0, 0, 0, 0)',
                            color: '#aaa',
                            stepSize: 0.2,
                            z: 1
                        },
                        angleLines: {
                            color: 'rgba(70, 70, 70, 0.5)',
                            lineWidth: 1
                        },
                        grid: {
                            color: 'rgba(70, 70, 70, 0.3)',
                            circular: true
                        },
                        pointLabels: {
                            color: '#e0e0e0',
                            font: {
                                size: 12
                            }
                        }
                    }
                },
                plugins: {
                    legend: {
                        display: true,
                        position: 'top',
                        labels: {
                            color: '#e0e0e0',
                            font: {
                                size: 14
                            },
                            boxWidth: 15,
                            padding: 15
                        }
                    },
                    tooltip: {
                        backgroundColor: 'rgba(15, 15, 15, 0.8)',
                        titleColor: '#7ede3b',
                        bodyColor: '#e0e0e0',
                        borderColor: '#444',
                        borderWidth: 1,
                        titleFont: {
                            size: 14,
                            weight: 'bold'
                        },
                        bodyFont: {
                            size: 13
                        },
                        padding: 10,
                        displayColors: false,
                        callbacks: {
                            label: function(context) {
                                return 'Impact: ' + (context.raw * 100).toFixed(1) + '%';
                            }
                        }
                    }
                }
            }
        });
        
        // Store the chart instance on the canvas
        canvas._chart = radarChart;
        
        console.log('Radar chart created successfully');
    }
    
    /**
     * Get data from canvas data attributes
     */
    function getDataFromCanvas(canvas, type) {
        var attr = 'data-' + type;
        if (canvas.hasAttribute(attr)) {
            try {
                return JSON.parse(canvas.getAttribute(attr));
            } catch (e) {
                console.error('Error parsing', attr, e);
                return null;
            }
        }
        return null;
    }
})(); 